{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/brundal/Documents/Website/Art-page-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Users/brundal/Documents/Website/Art-page-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"/Users/brundal/Documents/Website/Art-page-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"/Users/brundal/Documents/Website/Art-page-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"/Users/brundal/Documents/Website/Art-page-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nvar stream = require('stream');\nvar Transform = stream.Transform;\n\n/**\n * Ensures that only <CR><LF> sequences are used for linebreaks\n *\n * @param {Object} options Stream options\n */\nvar LeWindows = /*#__PURE__*/function (_Transform) {\n  _inherits(LeWindows, _Transform);\n  function LeWindows(options) {\n    var _this;\n    _classCallCheck(this, LeWindows);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LeWindows).call(this, options));\n    // init Transform\n    _this.options = options || {};\n    _this.lastByte = false;\n    return _this;\n  }\n\n  /**\n   * Escapes dots\n   */\n  _createClass(LeWindows, [{\n    key: \"_transform\",\n    value: function _transform(chunk, encoding, done) {\n      var buf;\n      var lastPos = 0;\n      for (var i = 0, len = chunk.length; i < len; i++) {\n        if (chunk[i] === 0x0a) {\n          // \\n\n          if (i && chunk[i - 1] !== 0x0d || !i && this.lastByte !== 0x0d) {\n            if (i > lastPos) {\n              buf = chunk.slice(lastPos, i);\n              this.push(buf);\n            }\n            this.push(Buffer.from('\\r\\n'));\n            lastPos = i + 1;\n          }\n        }\n      }\n      if (lastPos && lastPos < chunk.length) {\n        buf = chunk.slice(lastPos);\n        this.push(buf);\n      } else if (!lastPos) {\n        this.push(chunk);\n      }\n      this.lastByte = chunk[chunk.length - 1];\n      done();\n    }\n  }]);\n  return LeWindows;\n}(Transform);\nmodule.exports = LeWindows;","map":null,"metadata":{},"sourceType":"script"}