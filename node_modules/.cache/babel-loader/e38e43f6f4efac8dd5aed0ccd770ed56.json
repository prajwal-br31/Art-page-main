{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"/Users/brundal/Documents/Website/Art-page-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\nvar _classCallCheck = require(\"/Users/brundal/Documents/Website/Art-page-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Users/brundal/Documents/Website/Art-page-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"/Users/brundal/Documents/Website/Art-page-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"/Users/brundal/Documents/Website/Art-page-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _assertThisInitialized = require(\"/Users/brundal/Documents/Website/Art-page-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\nvar _inherits = require(\"/Users/brundal/Documents/Website/Art-page-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nvar EventEmitter = require('events');\nvar shared = require('../shared');\nvar mimeTypes = require('../mime-funcs/mime-types');\nvar MailComposer = require('../mail-composer');\nvar DKIM = require('../dkim');\nvar httpProxyClient = require('../smtp-connection/http-proxy-client');\nvar util = require('util');\nvar urllib = require('url');\nvar packageData = require('../../package.json');\nvar MailMessage = require('./mail-message');\nvar net = require('net');\nvar dns = require('dns');\nvar crypto = require('crypto');\n\n/**\n * Creates an object for exposing the Mail API\n *\n * @constructor\n * @param {Object} transporter Transport object instance to pass the mails to\n */\nvar Mail = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Mail, _EventEmitter);\n  function Mail(transporter, options, defaults) {\n    var _this;\n    _classCallCheck(this, Mail);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Mail).call(this));\n    _this.options = options || {};\n    _this._defaults = defaults || {};\n    _this._defaultPlugins = {\n      compile: [function () {\n        var _this2;\n        return (_this2 = _this)._convertDataImages.apply(_this2, arguments);\n      }],\n      stream: []\n    };\n    _this._userPlugins = {\n      compile: [],\n      stream: []\n    };\n    _this.meta = new Map();\n    _this.dkim = _this.options.dkim ? new DKIM(_this.options.dkim) : false;\n    _this.transporter = transporter;\n    _this.transporter.mailer = _assertThisInitialized(_this);\n    _this.logger = shared.getLogger(_this.options, {\n      component: _this.options.component || 'mail'\n    });\n    _this.logger.debug({\n      tnx: 'create'\n    }, 'Creating transport: %s', _this.getVersionString());\n\n    // setup emit handlers for the transporter\n    if (typeof transporter.on === 'function') {\n      // deprecated log interface\n      _this.transporter.on('log', function (log) {\n        _this.logger.debug({\n          tnx: 'transport'\n        }, '%s: %s', log.type, log.message);\n      });\n\n      // transporter errors\n      _this.transporter.on('error', function (err) {\n        _this.logger.error({\n          err: err,\n          tnx: 'transport'\n        }, 'Transport Error: %s', err.message);\n        _this.emit('error', err);\n      });\n\n      // indicates if the sender has became idle\n      _this.transporter.on('idle', function () {\n        var _this3;\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        (_this3 = _this).emit.apply(_this3, ['idle'].concat(args));\n      });\n    }\n\n    /**\n     * Optional methods passed to the underlying transport object\n     */\n    ['close', 'isIdle', 'verify'].forEach(function (method) {\n      _this[method] = function () {\n        if (typeof _this.transporter[method] === 'function') {\n          var _this$transporter;\n          return (_this$transporter = _this.transporter)[method].apply(_this$transporter, arguments);\n        } else {\n          _this.logger.warn({\n            tnx: 'transport',\n            methodName: method\n          }, 'Non existing method %s called for transport', method);\n          return false;\n        }\n      };\n    });\n\n    // setup proxy handling\n    if (_this.options.proxy && typeof _this.options.proxy === 'string') {\n      _this.setupProxy(_this.options.proxy);\n    }\n    return _this;\n  }\n  _createClass(Mail, [{\n    key: \"use\",\n    value: function use(step, plugin) {\n      step = (step || '').toString();\n      if (!this._userPlugins.hasOwnProperty(step)) {\n        this._userPlugins[step] = [plugin];\n      } else {\n        this._userPlugins[step].push(plugin);\n      }\n      return this;\n    }\n    /**\n     * Sends an email using the preselected transport object\n     *\n     * @param {Object} data E-data description\n     * @param {Function?} callback Callback to run once the sending succeeded or failed\n     */\n  }, {\n    key: \"sendMail\",\n    value: function sendMail(data, callback) {\n      var _this4 = this;\n      var promise;\n      if (!callback && typeof Promise === 'function') {\n        promise = new Promise(function (resolve, reject) {\n          callback = shared.callbackPromise(resolve, reject);\n        });\n      }\n      if (typeof this.getSocket === 'function') {\n        this.transporter.getSocket = this.getSocket;\n        this.getSocket = false;\n      }\n      var mail = new MailMessage(this, data);\n      this.logger.debug({\n        tnx: 'transport',\n        name: this.transporter.name,\n        version: this.transporter.version,\n        action: 'send'\n      }, 'Sending mail using %s/%s', this.transporter.name, this.transporter.version);\n      this._processPlugins('compile', mail, function (err) {\n        if (err) {\n          _this4.logger.error({\n            err: err,\n            tnx: 'plugin',\n            action: 'compile'\n          }, 'PluginCompile Error: %s', err.message);\n          return callback(err);\n        }\n        mail.message = new MailComposer(mail.data).compile();\n        mail.setMailerHeader();\n        mail.setPriorityHeaders();\n        mail.setListHeaders();\n        _this4._processPlugins('stream', mail, function (err) {\n          if (err) {\n            _this4.logger.error({\n              err: err,\n              tnx: 'plugin',\n              action: 'stream'\n            }, 'PluginStream Error: %s', err.message);\n            return callback(err);\n          }\n          if (mail.data.dkim || _this4.dkim) {\n            mail.message.processFunc(function (input) {\n              var dkim = mail.data.dkim ? new DKIM(mail.data.dkim) : _this4.dkim;\n              _this4.logger.debug({\n                tnx: 'DKIM',\n                messageId: mail.message.messageId(),\n                dkimDomains: dkim.keys.map(function (key) {\n                  return key.keySelector + '.' + key.domainName;\n                }).join(', ')\n              }, 'Signing outgoing message with %s keys', dkim.keys.length);\n              return dkim.sign(input, mail.data._dkim);\n            });\n          }\n          _this4.transporter.send(mail, function () {\n            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n              args[_key2] = arguments[_key2];\n            }\n            if (args[0]) {\n              _this4.logger.error({\n                err: args[0],\n                tnx: 'transport',\n                action: 'send'\n              }, 'Send Error: %s', args[0].message);\n            }\n            callback.apply(void 0, args);\n          });\n        });\n      });\n      return promise;\n    }\n  }, {\n    key: \"getVersionString\",\n    value: function getVersionString() {\n      return util.format('%s (%s; +%s; %s/%s)', packageData.name, packageData.version, packageData.homepage, this.transporter.name, this.transporter.version);\n    }\n  }, {\n    key: \"_processPlugins\",\n    value: function _processPlugins(step, mail, callback) {\n      step = (step || '').toString();\n      if (!this._userPlugins.hasOwnProperty(step)) {\n        return callback();\n      }\n      var userPlugins = this._userPlugins[step] || [];\n      var defaultPlugins = this._defaultPlugins[step] || [];\n      if (userPlugins.length) {\n        this.logger.debug({\n          tnx: 'transaction',\n          pluginCount: userPlugins.length,\n          step: step\n        }, 'Using %s plugins for %s', userPlugins.length, step);\n      }\n      if (userPlugins.length + defaultPlugins.length === 0) {\n        return callback();\n      }\n      var pos = 0;\n      var block = 'default';\n      var processPlugins = function processPlugins() {\n        var curplugins = block === 'default' ? defaultPlugins : userPlugins;\n        if (pos >= curplugins.length) {\n          if (block === 'default' && userPlugins.length) {\n            block = 'user';\n            pos = 0;\n            curplugins = userPlugins;\n          } else {\n            return callback();\n          }\n        }\n        var plugin = curplugins[pos++];\n        plugin(mail, function (err) {\n          if (err) {\n            return callback(err);\n          }\n          processPlugins();\n        });\n      };\n      processPlugins();\n    }\n    /**\n     * Sets up proxy handler for a Nodemailer object\n     *\n     * @param {String} proxyUrl Proxy configuration url\n     */\n  }, {\n    key: \"setupProxy\",\n    value: function setupProxy(proxyUrl) {\n      var _this5 = this;\n      var proxy = urllib.parse(proxyUrl);\n\n      // setup socket handler for the mailer object\n      this.getSocket = function (options, callback) {\n        var protocol = proxy.protocol.replace(/:$/, '').toLowerCase();\n        if (_this5.meta.has('proxy_handler_' + protocol)) {\n          return _this5.meta.get('proxy_handler_' + protocol)(proxy, options, callback);\n        }\n        switch (protocol) {\n          // Connect using a HTTP CONNECT method\n          case 'http':\n          case 'https':\n            httpProxyClient(proxy.href, options.port, options.host, function (err, socket) {\n              if (err) {\n                return callback(err);\n              }\n              return callback(null, {\n                connection: socket\n              });\n            });\n            return;\n          case 'socks':\n          case 'socks5':\n          case 'socks4':\n          case 'socks4a':\n            {\n              if (!_this5.meta.has('proxy_socks_module')) {\n                return callback(new Error('Socks module not loaded'));\n              }\n              var connect = function connect(ipaddress) {\n                var _connectionOpts;\n                var proxyV2 = !!_this5.meta.get('proxy_socks_module').SocksClient;\n                var socksClient = proxyV2 ? _this5.meta.get('proxy_socks_module').SocksClient : _this5.meta.get('proxy_socks_module');\n                var proxyType = Number(proxy.protocol.replace(/\\D/g, '')) || 5;\n                var connectionOpts = (_connectionOpts = {\n                  proxy: {\n                    ipaddress: ipaddress,\n                    port: Number(proxy.port),\n                    type: proxyType\n                  }\n                }, _defineProperty(_connectionOpts, proxyV2 ? 'destination' : 'target', {\n                  host: options.host,\n                  port: options.port\n                }), _defineProperty(_connectionOpts, \"command\", 'connect'), _connectionOpts);\n                if (proxy.auth) {\n                  var username = decodeURIComponent(proxy.auth.split(':').shift());\n                  var password = decodeURIComponent(proxy.auth.split(':').pop());\n                  if (proxyV2) {\n                    connectionOpts.userId = username;\n                    connectionOpts.password = password;\n                  } else if (proxyType === 4) {\n                    connectionOpts.userid = username;\n                  } else {\n                    connectionOpts.authentication = {\n                      username: username,\n                      password: password\n                    };\n                  }\n                }\n                socksClient.createConnection(connectionOpts, function (err, info) {\n                  if (err) {\n                    return callback(err);\n                  }\n                  return callback(null, {\n                    connection: info.socket || info\n                  });\n                });\n              };\n              if (net.isIP(proxy.hostname)) {\n                return connect(proxy.hostname);\n              }\n              return dns.resolve(proxy.hostname, function (err, address) {\n                if (err) {\n                  return callback(err);\n                }\n                connect(Array.isArray(address) ? address[0] : address);\n              });\n            }\n        }\n        callback(new Error('Unknown proxy configuration'));\n      };\n    }\n  }, {\n    key: \"_convertDataImages\",\n    value: function _convertDataImages(mail, callback) {\n      if (!this.options.attachDataUrls && !mail.data.attachDataUrls || !mail.data.html) {\n        return callback();\n      }\n      mail.resolveContent(mail.data, 'html', function (err, html) {\n        if (err) {\n          return callback(err);\n        }\n        var cidCounter = 0;\n        html = (html || '').toString().replace(/(<img\\b[^>]* src\\s*=[\\s\"']*)(data:([^;]+);[^\"'>\\s]+)/gi, function (match, prefix, dataUri, mimeType) {\n          var cid = crypto.randomBytes(10).toString('hex') + '@localhost';\n          if (!mail.data.attachments) {\n            mail.data.attachments = [];\n          }\n          if (!Array.isArray(mail.data.attachments)) {\n            mail.data.attachments = [].concat(mail.data.attachments || []);\n          }\n          mail.data.attachments.push({\n            path: dataUri,\n            cid: cid,\n            filename: 'image-' + ++cidCounter + '.' + mimeTypes.detectExtension(mimeType)\n          });\n          return prefix + 'cid:' + cid;\n        });\n        mail.data.html = html;\n        callback();\n      });\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, value) {\n      return this.meta.set(key, value);\n    }\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      return this.meta.get(key);\n    }\n  }]);\n  return Mail;\n}(EventEmitter);\nmodule.exports = Mail;","map":null,"metadata":{},"sourceType":"script"}