{"ast":null,"code":"'use strict';\n\n// FIXME:\n// replace this Transform mess with a method that pipes input argument to output argument\nvar _classCallCheck = require(\"/Users/brundal/Documents/Website/Art-page-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Users/brundal/Documents/Website/Art-page-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar MessageParser = require('./message-parser');\nvar RelaxedBody = require('./relaxed-body');\nvar sign = require('./sign');\nvar PassThrough = require('stream').PassThrough;\nvar fs = require('fs');\nvar path = require('path');\nvar crypto = require('crypto');\nvar DKIM_ALGO = 'sha256';\nvar MAX_MESSAGE_SIZE = 128 * 1024; // buffer messages larger than this to disk\n\n/*\n// Usage:\n\nlet dkim = new DKIM({\n    domainName: 'example.com',\n    keySelector: 'key-selector',\n    privateKey,\n    cacheDir: '/tmp'\n});\ndkim.sign(input).pipe(process.stdout);\n\n// Where inputStream is a rfc822 message (either a stream, string or Buffer)\n// and outputStream is a DKIM signed rfc822 message\n*/\nvar DKIMSigner = /*#__PURE__*/function () {\n  function DKIMSigner(options, keys, input, output) {\n    var _this = this;\n    _classCallCheck(this, DKIMSigner);\n    this.options = options || {};\n    this.keys = keys;\n    this.cacheTreshold = Number(this.options.cacheTreshold) || MAX_MESSAGE_SIZE;\n    this.hashAlgo = this.options.hashAlgo || DKIM_ALGO;\n    this.cacheDir = this.options.cacheDir || false;\n    this.chunks = [];\n    this.chunklen = 0;\n    this.readPos = 0;\n    this.cachePath = this.cacheDir ? path.join(this.cacheDir, 'message.' + Date.now() + '-' + crypto.randomBytes(14).toString('hex')) : false;\n    this.cache = false;\n    this.headers = false;\n    this.bodyHash = false;\n    this.parser = false;\n    this.relaxedBody = false;\n    this.input = input;\n    this.output = output;\n    this.output.usingCache = false;\n    this.errored = false;\n    this.input.on('error', function (err) {\n      _this.errored = true;\n      _this.cleanup();\n      output.emit('error', err);\n    });\n  }\n  _createClass(DKIMSigner, [{\n    key: \"cleanup\",\n    value: function cleanup() {\n      if (!this.cache || !this.cachePath) {\n        return;\n      }\n      fs.unlink(this.cachePath, function () {\n        return false;\n      });\n    }\n  }, {\n    key: \"createReadCache\",\n    value: function createReadCache() {\n      var _this2 = this;\n      // pipe remainings to cache file\n      this.cache = fs.createReadStream(this.cachePath);\n      this.cache.once('error', function (err) {\n        _this2.cleanup();\n        _this2.output.emit('error', err);\n      });\n      this.cache.once('close', function () {\n        _this2.cleanup();\n      });\n      this.cache.pipe(this.output);\n    }\n  }, {\n    key: \"sendNextChunk\",\n    value: function sendNextChunk() {\n      var _this3 = this;\n      if (this.errored) {\n        return;\n      }\n      if (this.readPos >= this.chunks.length) {\n        if (!this.cache) {\n          return this.output.end();\n        }\n        return this.createReadCache();\n      }\n      var chunk = this.chunks[this.readPos++];\n      if (this.output.write(chunk) === false) {\n        return this.output.once('drain', function () {\n          _this3.sendNextChunk();\n        });\n      }\n      setImmediate(function () {\n        return _this3.sendNextChunk();\n      });\n    }\n  }, {\n    key: \"sendSignedOutput\",\n    value: function sendSignedOutput() {\n      var _this4 = this;\n      var keyPos = 0;\n      var signNextKey = function signNextKey() {\n        if (keyPos >= _this4.keys.length) {\n          _this4.output.write(_this4.parser.rawHeaders);\n          return setImmediate(function () {\n            return _this4.sendNextChunk();\n          });\n        }\n        var key = _this4.keys[keyPos++];\n        var dkimField = sign(_this4.headers, _this4.hashAlgo, _this4.bodyHash, {\n          domainName: key.domainName,\n          keySelector: key.keySelector,\n          privateKey: key.privateKey,\n          headerFieldNames: _this4.options.headerFieldNames,\n          skipFields: _this4.options.skipFields\n        });\n        if (dkimField) {\n          _this4.output.write(Buffer.from(dkimField + '\\r\\n'));\n        }\n        return setImmediate(signNextKey);\n      };\n      if (this.bodyHash && this.headers) {\n        return signNextKey();\n      }\n      this.output.write(this.parser.rawHeaders);\n      this.sendNextChunk();\n    }\n  }, {\n    key: \"createWriteCache\",\n    value: function createWriteCache() {\n      var _this5 = this;\n      this.output.usingCache = true;\n      // pipe remainings to cache file\n      this.cache = fs.createWriteStream(this.cachePath);\n      this.cache.once('error', function (err) {\n        _this5.cleanup();\n        // drain input\n        _this5.relaxedBody.unpipe(_this5.cache);\n        _this5.relaxedBody.on('readable', function () {\n          while (_this5.relaxedBody.read() !== null) {\n            // do nothing\n          }\n        });\n        _this5.errored = true;\n        // emit error\n        _this5.output.emit('error', err);\n      });\n      this.cache.once('close', function () {\n        _this5.sendSignedOutput();\n      });\n      this.relaxedBody.removeAllListeners('readable');\n      this.relaxedBody.pipe(this.cache);\n    }\n  }, {\n    key: \"signStream\",\n    value: function signStream() {\n      var _this6 = this;\n      this.parser = new MessageParser();\n      this.relaxedBody = new RelaxedBody({\n        hashAlgo: this.hashAlgo\n      });\n      this.parser.on('headers', function (value) {\n        _this6.headers = value;\n      });\n      this.relaxedBody.on('hash', function (value) {\n        _this6.bodyHash = value;\n      });\n      this.relaxedBody.on('readable', function () {\n        var chunk;\n        if (_this6.cache) {\n          return;\n        }\n        while ((chunk = _this6.relaxedBody.read()) !== null) {\n          _this6.chunks.push(chunk);\n          _this6.chunklen += chunk.length;\n          if (_this6.chunklen >= _this6.cacheTreshold && _this6.cachePath) {\n            return _this6.createWriteCache();\n          }\n        }\n      });\n      this.relaxedBody.on('end', function () {\n        if (_this6.cache) {\n          return;\n        }\n        _this6.sendSignedOutput();\n      });\n      this.parser.pipe(this.relaxedBody);\n      setImmediate(function () {\n        return _this6.input.pipe(_this6.parser);\n      });\n    }\n  }]);\n  return DKIMSigner;\n}();\nvar DKIM = /*#__PURE__*/function () {\n  function DKIM(options) {\n    _classCallCheck(this, DKIM);\n    this.options = options || {};\n    this.keys = [].concat(this.options.keys || {\n      domainName: options.domainName,\n      keySelector: options.keySelector,\n      privateKey: options.privateKey\n    });\n  }\n  _createClass(DKIM, [{\n    key: \"sign\",\n    value: function sign(input, extraOptions) {\n      var _this7 = this;\n      var output = new PassThrough();\n      var inputStream = input;\n      var writeValue = false;\n      if (Buffer.isBuffer(input)) {\n        writeValue = input;\n        inputStream = new PassThrough();\n      } else if (typeof input === 'string') {\n        writeValue = Buffer.from(input);\n        inputStream = new PassThrough();\n      }\n      var options = this.options;\n      if (extraOptions && Object.keys(extraOptions).length) {\n        options = {};\n        Object.keys(this.options || {}).forEach(function (key) {\n          options[key] = _this7.options[key];\n        });\n        Object.keys(extraOptions || {}).forEach(function (key) {\n          if (!(key in options)) {\n            options[key] = extraOptions[key];\n          }\n        });\n      }\n      var signer = new DKIMSigner(options, this.keys, inputStream, output);\n      setImmediate(function () {\n        signer.signStream();\n        if (writeValue) {\n          setImmediate(function () {\n            inputStream.end(writeValue);\n          });\n        }\n      });\n      return output;\n    }\n  }]);\n  return DKIM;\n}();\nmodule.exports = DKIM;","map":null,"metadata":{},"sourceType":"script"}